{
	"compilerOptions": {
		// 目标语言版本
		"target": "ES2020",
		// 是否使用定义类字段
		"useDefineForClassFields": true,
		// 生成代码的模版标准
		"module": "ESNext",
		// TS需要引入的库, 即声明文件
		"lib": ["ES2020", "DOM", "DOM.Iterable"],
		// 是否跳过声明文件的类型检查
		"skipLibCheck": true,
		// 是否编译 javascript 文件
		"allowJs": false,
		// 是否报告 javascript 文件的错误
		"checkJs": false,
		// 是否删除编译后的所有注释
		"removeComments": true,
		// 是否当有错误的时候不编译生成文件
		"noEmitOnError": true,
		// 是否不输出文件, 即编译后不会生成任何 js 文件
		"noEmit": true,
		// 将每个文件作为单独的模块 (与 ts.transpileModule 类似)
		"isolatedModules": true,
		// 指定 jsx 代码的生成: 'preserve' | 'react-native' | 'react'
		"jsx": "preserve",
		// 指定针对 React JSX emit 时使用的 JSX 工厂函数: React.createElement | h
		"jsxFactory": "h",
		// 指定用于片段的JSX片段引用，当目标是React JSX emit时: 'React.Fragment' | 'Fragment'
		"jsxFragmentFactory": "Fragment",
		// 指定用于在使用JSX时导入JSX工厂函数的模块说明符
		"jsxImportSource": "vue",
		// 路径映射
		"paths": {
			"@/*": ["src/*"],
			"#/*": ["types/*"]
		},
		// 启用所有的严格类型检查选项
		"strict": true,
		// 在表达式和声明上有隐含的 any类型时报错
		"noImplicitAny": true,
		// 启用严格的 null 检查
		"strictNullChecks": true,
		// 当 this 表达式值为 any 类型时, 生成一个错误
		"noImplicitThis": true,
		// 以严格模式检查每个模块, 并在每个文件中加入 'use strict'
		"alwaysStrict": true,
		// 有未使用的变量时，抛出错误
		"noUnusedLocals": true,
		// 当未读取函数参数时引发错误
		"noUnusedParameters": true,
		// 在函数中没有显式返回的代码路径启用错误报告
		"noImplicitReturns": true,
		// 在switch语句中启用故障报告
		"noFallthroughCasesInSwitch": true,
		// 模块解析策略, ts 默认使用 node 解析策略 即相对的方式导入
		"moduleResolution": "Bundler",
		// 用于解析非相对模块名称的基目录
		"baseUrl": "./",
		// 包含类型声明的文件列表
		"typeRoots": ["node_modules/@types", "types"],
		// 加载的声明文件包
		"types": ["node"],
		// 设置为 true 则可以直接 import 导入本地的 json 文件
		"resolveJsonModule": true,
		// 是否允许拓展
		"allowImportingTsExtensions": true,
		// 允许从没有设置默认导出的模块中默认导入
		"allowSyntheticDefaultImports": true
	},
	"include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue", "types/**/*.ts", "types/**/*.d.ts"],
	"exclude": ["node_modules", "admin-template-dist", "**/*.js"],
	"references": [{ "path": "./tsconfig.node.json" }]
}
