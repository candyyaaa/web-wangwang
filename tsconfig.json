{
	"compilerOptions": {
		// * 基本选项
		// 目标语言的版本
		"target": "ES2020",
		// 生成代码的模板标准
		"module": "ESNext",
		// TS需要引用的库，即声明文件
		"lib": ["ES2020", "DOM", "DOM.Iterable", "WebWorker"],
		// 允许编译 javascript 文件
		"allowJs": false,
		// 报告 javascript 文件中的错误
		"checkJs": false,
		// 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
		"jsx": "preserve",
		// 指定输出目录
		"outDir": "web-wangwang",
		// 删除编译后的所有的注释
		"removeComments": true,
		// 不输出文件, 即编译后不会生成任何js文件
		"noEmit": true,
		// 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）
		"isolatedModules": true,
		// 使用定义类字段
		"useDefineForClassFields": true,
		// 跳过声明文件的类型检查
		"skipLibCheck": true,
		"paths": {
			"@/*": ["src/*"],
			"#/*": ["types/*"]
		},

		// * 严格的类型检查选项
		// 启用所有严格类型检查选项
		"strict": true,
		// 在表达式和声明上有隐含的 any类型时报错
		"noImplicitAny": true,
		// 启用严格的 null 检查
		"strictNullChecks": true,
		// 当 this 表达式值为 any 类型的时候，生成一个错误
		"noImplicitThis": true,
		// 以严格模式检查每个模块，并在每个文件里加入 'use strict'
		"alwaysStrict": true,

		// * 额外的检查
		// 有未使用的变量时，抛出错误
		"noUnusedLocals": true,
		// 有未使用的参数时，抛出错误
		"noUnusedParameters": true,
		// 并不是所有函数里的代码都有返回值时，抛出错误
		"noImplicitReturns": true,
		// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）
		"noFallthroughCasesInSwitch": true,

		// * 模块解析选项
		// 模块解析策略，ts默认用node的解析策略，即相对的方式导入
		"moduleResolution": "node",
		// 用于解析非相对模块名称的基目录
		"baseUrl": ".",
		// 包含类型声明的文件列表
		"typeRoots": ["node_modules/@types", "types"],
		// 加载的声明文件包
		"types": ["node", "./types/env.d.ts"],
		// 设置true则可以直接import导入本地的json文件
		"resolveJsonModule": true,
		// 允许从没有设置默认导出的模块中默认导入
		"allowSyntheticDefaultImports": true
	},
	"include": [
		"src/**/*.ts",
		"src/**/*.d.ts",
		"src/**/*.tsx",
		"src/**/*.vue",
		"types/**/*.ts",
		"types/**/*.d.ts"
	],
	"exclude": ["node_modules", "dist", "**/*.js"],
	"references": [{ "path": "./tsconfig.node.json" }]
}
